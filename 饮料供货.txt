//饮料供货是一个求最优解问题。需要在给定最大容量V的前提下，从不同容量不同满意度的饮料中选择满意度最大的集合。
/*
    书中提到第二种解法，贪心算法。由于所有饮料的容量都是2的整数幂，这就给贪心创造了条件。

假设给定的容量为V，我们可以把V写成二进制的形式，不妨设V=7，二进制的写法为111。

接下来我们就从最低位开始取：

第一步，取第一个1：拿出容量为1满意度最大的饮料，

第二步，取第二个1：使用剩余容量为1的饮料构造容量为2的饮料，比如(1,2)(1,3)构造出(2,5)，并从新构造的和原有容量为2的所有饮料中选出满意度最大的。

第三步，取第三个1：递归构造容量为4的饮料，并从新构造的和原有容量为4的所有饮料中选出满意度最大的。

*/
struct Drink
{
	int Volume;
	int TotalCount;
	int Happiness;
	Drink(int v, int t, int h)
	{
		Volume = v;
		TotalCount = t;
		Happiness = h;
	}
};

vector<vector<Drink> > drinks;
void initialize()
{
	ifstream fin("drink.txt");
	int v,t,h;
	
	while(fin>>v>>t>>h)
	{
		while(drinks.size()<=v)
		{
			drinks.push_back(vector<Drink>());
		}
		drinks[v].push_back(Drink((int)pow(2,v),t,h));
	}
	fin.close();
}

int TakeOutMax( int k)
{
	int maxHappiness = 0;
	if (k < 0) return 0;
	
	if (k > 0){
		int t =k-1;
		int h = TakeOutMax(t);//要从1,2,4L里递归找到最大4L
		if (h>0){//如果拼凑不出一个4L来，说明直接从8L里找
			drinks[t].push_back(Drink((int)pow(2,t), 1, h));//假设拿出8L，要2个4L，第一个4L先从2L和1L里找最大的。如果找到，则拿出来后还要放回去。
			h = TakeOutMax(t);//第二个4L从2L和1L里找最大的，即使是徒劳的。
			if (h>0)
			{
				drinks[t].push_back(Drink((int)pow(2,t), 1, h));
			}
		}
		int p1, p2;
		p1 = p2 = -1;
		for (int i=0; i<drinks[t].size(); i++)
		{
			for (int j=i+1; j<drinks[t].size(); ++j)
			{
				if (drinks[t][i].TotalCount>0 && drinks[t][j].TotalCount>0 && drinks[t][i].Happiness+drinks[t][j].Happiness>maxHappiness)
				{
					maxHappiness = drinks[t][i].Happiness+drinks[t][j].Happiness;
					p1 = i;
					p2 = j;
				}
			}
		}
		if (p1 >-1 && p2 > -1)
		{
			drinks[t][p1].TotalCount--;
			drinks[t][p2].TotalCount--;
			drinks[k].push_back(Drink((int)pow(2,k), 1, maxHappiness));
		}
	}
	int p=-1;
	maxHappiness = 0;
	for (int i=0; i<drinks[k].size(); ++i)
	{
		if (drinks[k][i].TotalCount>0 && drinks[k][i].Happiness>maxHappiness)
		{
			maxHappiness = drinks[k][i].Happiness;
			p = i;
		}
	}
	if (p >=0 ){
		drinks[k][p].TotalCount--;
	}
	return maxHappiness;
}
 
// 贪心算法
int GetMaxHappinessByGreed(int V)
{
	int k = V;
	int i=0;
	int happiness = 0;
	while(k)
	{
		if (k & 1) happiness += TakeOutMax(i);
		k >>= 1;
		i++;
	}
	return happiness;
}


*************************

这个题目解决的问题：
1、数据的存放，二维vector。
2、如果要买18L，肯定会先买到2L，不可能由4L或者8L合并出18L来，这用到位运算的思想，这也为贪心奠定了理论基础
3、怎样购买8L问题：8L有一次性购买8L的方式，也有购买两个4L的方式，从4L的所有组合中凑出两个最大的，加入到8L的组合中，不管这个新加入的是不是最大的，只管在新的8L组合中拿出一个最大的，并在集合中删除之。这里从4L的组合中拿出两个最大的，也是先要从2L的组合里选取最大的，过程类似8L取4L，是一个递归过程，但是拿出元素后，要及时放回去，具体见代码注释。
4、一个陷阱就是vector[5]还没开始声明，就运用，也就是vector里才3个元素，就要拿出第5个值。