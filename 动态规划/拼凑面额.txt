动态规划：【最优子结构】、【边界】、【状态转移公式】
https://www.nowcoder.com/profile/9371883/codeBookDetail?submissionId=18659594
给你六种面额1、5、10、20、50、100元的纸币，假设每种币值的数量都足够多，编写程序求组成N元（N为0-10000的非负整数）的不同组合的个数。
输入描述:
输入为一个数字N，即需要拼凑的面额
输出描述:
输出也是一个数字，为组成N的组合个数。
示例1
输入
5
输出
2

#include<stdio.h>
int main()
{
    int n;
    int money[6]={1,5,10,20,50,100};
    while(scanf("%d",&n)!=EOF)
    {
        long long  dp[10000];
        for(int j=0;j<=n;j++)
            dp[j]=1;
        for(int i=1;i<6;i++)
            for(int j=1;j<=n;j++)
            {
                if(j>=money[i])
                    dp[j]+=dp[j-money[i]];
            }
        printf("%ld",dp[n]);
    }
    return 0;
}

感觉可以用动态规划逐步往出推结果，但是总是找不到思路，找不到状态变换公式，而暴力法又超时了。
假设n为1000。最大面值为100时，值为A(1000,100) 。则A(1000,100) =A(900,100) + A(1000,50)。







